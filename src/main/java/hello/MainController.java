package hello;

import java.net.URI;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController  {
	@Autowired // This means to get the bean called patientRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PatientRepository patientRepository;
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String nhsid) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Patient n = new Patient();
		n.setName(name);
		n.setNhsid(nhsid);
		patientRepository.save(n);
		return "Saved";
	}
	
	// ResponseEntity<Patient>
	// https://medium.com/@konstantinnalum/input-validation-and-unit-testing-of-a-rest-controller-in-spring-boot-304b82ca7526
	@PostMapping(path = "/createpatient")
	public Patient createPatient(@Valid @RequestBody Patient patient) {
		//return ResponseEntity.ok(patientRepository.save(patient));
		
		Patient n = new Patient();
		n.setName(patient.getName());
		n.setNhsid(patient.getNhsid());
		
		return patientRepository.save(n);
	}
	
	@PostMapping(path = "/createpatient2")
	public String createPatient2(@Valid @RequestBody Patient patient) {
		//return ResponseEntity.ok(patientRepository.save(patient));
		
		Patient n = new Patient();
		n.setName(patient.getName());
		n.setNhsid(patient.getNhsid());
		
		Patient p = patientRepository.save(n);
		
		return "{}";
	}
	
	@PostMapping(path = "/createpatient3")
    public ResponseEntity <String> persistPerson(@Valid @RequestBody Patient patient) {
        
		
		Patient n = new Patient();
		n.setName(patient.getName());
		n.setNhsid(patient.getNhsid());
		
		Patient p = patientRepository.save(n);
		
		return ResponseEntity.status(HttpStatus.CREATED).build();
		
		/*
		if (personService.isValid(person)) {
            personRepository.persist(person);
            return ResponseEntity.status(HttpStatus.CREATED).build();
        }
        return ResponseEntity.status(HttpStatus.I_AM_A_TEAPOT).build();
        */
    }
	
	@PostMapping(path = "/createpatient4")
	public ResponseEntity<Void> createpatient4(@Valid @RequestBody Patient patient) {

		Patient n = new Patient();
		n.setName(patient.getName());
		n.setNhsid(patient.getNhsid());
		
		Patient p = patientRepository.save(n);
		
		//if (course == null)
		//	return ResponseEntity.noContent().build();

		URI location = ServletUriComponentsBuilder.fromPath("/getpatient/{id}").buildAndExpand(p.getId()).toUri();

		return ResponseEntity.created(location).build();
	}
	
	@PostMapping(path = "/createpatient5")
	public Patient createpatient5(@Valid @RequestBody Patient patient) {

		Patient n = new Patient();
		n.setName(patient.getName());
		n.setNhsid(patient.getNhsid());
		
		Patient p = patientRepository.save(n);
		
		System.out.println("%%%%%%%%%%%%%%%" + p.toString());
		
		//if (course == null)
		//	return ResponseEntity.noContent().build();

		//URI location = ServletUriComponentsBuilder.fromPath("/getpatient/{id}").buildAndExpand(p.getId()).toUri();

		return p;
	}
	
	@PostMapping(path = "/createpatient6")
	public void createpatient6(@Valid @RequestBody Patient patient) {

		Patient n = new Patient();
		n.setName(patient.getName());
		n.setNhsid(patient.getNhsid());
		
		Patient p = patientRepository.save(n);
		
		System.out.println("%%%%%%%%%%%%%%%" + p.toString());
		
		//if (course == null)
		//	return ResponseEntity.noContent().build();

		//URI location = ServletUriComponentsBuilder.fromPath("/getpatient/{id}").buildAndExpand(p.getId()).toUri();

	}
	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Patient> getAllPatients() {
		// This returns a JSON or XML with the users
		return patientRepository.findAll();
	}
	
	@GetMapping(path="/getpatient")
	public @ResponseBody Patient getPatientsByID(@RequestParam int id) {
		// This returns a JSON or XML with the users
		return patientRepository.findById(id);
	}

	/*
	@Override
	  public String getErrorPath() {
	    return "/error";
	  }

	  @RequestMapping
	  public Map<String, Object> error(HttpServletRequest aRequest){
	     Map<String, Object> body = getErrorAttributes(aRequest,getTraceParameter(aRequest));
	     String trace = (String) body.get("trace");
	     if(trace != null){
	       String[] lines = trace.split("\n\t");
	       body.put("trace", lines);
	     }
	     return body;
	  }
	  
	  private final ErrorAttributes errorAttributes;

	  @Autowired
	  public MainController(ErrorAttributes errorAttributes) {
	    Assert.notNull(errorAttributes, "ErrorAttributes must not be null");
	    this.errorAttributes = errorAttributes;
	  }
	  
	 
	  private boolean getTraceParameter(HttpServletRequest request) {
		    String parameter = request.getParameter("trace");
		    if (parameter == null) {
		        return false;
		    }
		    return !"false".equals(parameter.toLowerCase());
		  }

		  private Map<String, Object> getErrorAttributes(HttpServletRequest aRequest, boolean includeStackTrace) {
		    RequestAttributes requestAttributes = new ServletRequestAttributes(aRequest);
		    return errorAttributes.getErrorAttributes(requestAttributes, includeStackTrace);
		  }
		  */
}
